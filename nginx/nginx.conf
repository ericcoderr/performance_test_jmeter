
#user  nobody;
user root;
worker_processes  1;

#error_log  logs/error.log;
#error_log  logs/error.log  notice;
#error_log  logs/error.log  info;

#pid        logs/nginx.pid;


events {
    worker_connections  1024;
}


http {
    include       mime.types;
    default_type  application/octet-stream;

    #log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
    #                  '$status $body_bytes_sent "$http_referer" '
    #                  '"$http_user_agent" "$http_x_forwarded_for"';

    #access_log  logs/access.log  main;

    sendfile        on;
    #tcp_nopush     on;

    #keepalive_timeout  0;
    keepalive_timeout  65;

    #gzip  on;



	server {
        listen       9000;
        server_name  192.168.19.214;

        #charset koi8-r;

        #access_log  logs/host.access.log  main;
        location / {
           #root   D:/performance_test_jmeter/jmeter/;
           root /home/devsupport/performance_test_jmeter/jmeter/;
           index  index.html index.htm;
        }

        location /test_case/ {
           #alias   D:/performance_test_jmeter/jmeter/test_case/;
           alias /home/devsupport/performance_test_jmeter/jmeter/test_case/;
           autoindex on;
           autoindex_format html;
           charset utf-8,gbk;
          #index  index.html index.htm;
        }

        location ~ \.jmx$ {
            default_type   text/html ;
            content_by_lua '

               -- path parse
               local uri = ngx.var.request_uri;
               local base = "/d/performance_test_jmeter/jmeter"
               local base = "/home/devsupport/performance_test_jmeter/jmeter"
               local osDate = os.date("%Y%m%d%H%M%S", os.time());
               local ts = "/test_case/scan_go/case/scan_go.jmx";
               local project = string.match(uri, "/test_case/(%w+_*%w+)/");
               local jmx = base..uri;
               local base_path = base.."/test_case/"..project.."/"..osDate.."/";
               --path parse

               --log
               local log= base.."/test_case/"..project.."/"..osDate..".log";
               --log

               local shellfile=base.."/test_start.sh ";
               shell_str = shellfile.."  "..jmx.."  "..base_path.." > "..log.." 2>&1 &";
               ngx.print("<html><body>");
               ngx.print(base_path.."<br>");
               ngx.print(shell_str.."<br>");
               local status = os.execute("bash  "..shell_str);
               local message ="";
               local file = io.open(log,"r");
               if file then
                    for line in file:lines() do
                        message=message..line.."<br>"
                    end
               end;
               file:close();
               
               ngx.print("<span>success:<br></span>");
               os.execute("sleep " .. 3);
               --ngx.print("status:"..status.."<br>");
               ngx.print("<span>message:"..message.."<br></span>");
               ngx.print("</body></html>");
               --ngx.exit(200);

          ';
        }

        #error_page  404              /404.html;

        # redirect server error pages to the static page /50x.html
        #
        error_page   500 502 503 504  /50x.html;
        location = /50x.html {
            root   html;
        }

        # proxy the PHP scripts to Apache listening on 127.0.0.1:80
        #
        #location ~ \.php$ {
        #    proxy_pass   http://127.0.0.1;
        #}

        # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000
        #
        #location ~ \.php$ {
        #    root           html;
        #    fastcgi_pass   127.0.0.1:9000;
        #    fastcgi_index  index.php;
        #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;
        #    include        fastcgi_params;
        #}

        # deny access to .htaccess files, if Apache's document root
        # concurs with nginx's one
        #
        #location ~ /\.ht {
        #    deny  all;
        #}
    }


    # another virtual host using mix of IP-, name-, and port-based configuration
    #
    #server {
    #    listen       8000;
    #    listen       somename:8080;
    #    server_name  somename  alias  another.alias;

    #    location / {
    #        root   html;
    #        index  index.html index.htm;
    #    }
    #}


    # HTTPS server
    #
    #server {
    #    listen       443 ssl;
    #    server_name  localhost;

    #    ssl_certificate      cert.pem;
    #    ssl_certificate_key  cert.key;

    #    ssl_session_cache    shared:SSL:1m;
    #    ssl_session_timeout  5m;

    #    ssl_ciphers  HIGH:!aNULL:!MD5;
    #    ssl_prefer_server_ciphers  on;

    #    location / {
    #        root   html;
    #        index  index.html index.htm;
    #    }
    #}

}
